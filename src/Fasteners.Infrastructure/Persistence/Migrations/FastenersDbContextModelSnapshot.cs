// <auto-generated />
using System;
using Fasteners.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fasteners.Infrastructure.Persistence.Migrations;

[DbContext(typeof(FastenersDbContext))]
partial class FastenersDbContextModelSnapshot : ModelSnapshot
{
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "8.0.4")
            .HasAnnotation("Relational:MaxIdentifierLength", 128);

        SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

        modelBuilder.Entity("Fasteners.Domain.Entities.Brand", b =>
        {
            b.Property<Guid>("Id")
                .HasColumnType("uniqueidentifier");

            b.Property<string>("Name")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.HasKey("Id");

            b.ToTable("Brands");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.Category", b =>
        {
            b.Property<Guid>("Id")
                .HasColumnType("uniqueidentifier");

            b.Property<Guid?>("ParentId")
                .HasColumnType("uniqueidentifier");

            b.Property<string>("Name")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("Slug")
                .IsRequired()
                .HasColumnType("nvarchar(450)");

            b.HasKey("Id");

            b.HasIndex("ParentId");

            b.HasIndex("Slug")
                .IsUnique();

            b.ToTable("Categories");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.Inventory", b =>
        {
            b.Property<Guid>("Id")
                .HasColumnType("uniqueidentifier");

            b.Property<bool>("AllowBackorder")
                .HasColumnType("bit");

            b.Property<int>("Allocated")
                .HasColumnType("int");

            b.Property<int>("Backordered")
                .HasColumnType("int");

            b.Property<DateTime?>("EstimatedRestockDate")
                .HasColumnType("datetime2");

            b.Property<int>("OnHand")
                .HasColumnType("int");

            b.Property<Guid>("ProductVariantId")
                .HasColumnType("uniqueidentifier");

            b.HasKey("Id");

            b.HasIndex("ProductVariantId")
                .IsUnique();

            b.ToTable("Inventory");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.PriceTier", b =>
        {
            b.Property<Guid>("Id")
                .HasColumnType("uniqueidentifier");

            b.Property<int>("MinQuantity")
                .HasColumnType("int");

            b.Property<decimal>("Price")
                .HasColumnType("decimal(18,2)");

            b.Property<Guid>("ProductVariantId")
                .HasColumnType("uniqueidentifier");

            b.Property<string>("TierName")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.HasKey("Id");

            b.HasIndex("ProductVariantId");

            b.ToTable("PriceTiers");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.Product", b =>
        {
            b.Property<Guid>("Id")
                .HasColumnType("uniqueidentifier");

            b.Property<Guid>("BrandId")
                .HasColumnType("uniqueidentifier");

            b.Property<Guid>("CategoryId")
                .HasColumnType("uniqueidentifier");

            b.Property<string>("Description")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("Name")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("Slug")
                .IsRequired()
                .HasColumnType("nvarchar(450)");

            b.HasKey("Id");

            b.HasIndex("BrandId");

            b.HasIndex("CategoryId");

            b.HasIndex("Slug")
                .IsUnique();

            b.ToTable("Products");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.ProductImage", b =>
        {
            b.Property<Guid>("Id")
                .HasColumnType("uniqueidentifier");

            b.Property<string>("AltText")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<Guid>("ProductId")
                .HasColumnType("uniqueidentifier");

            b.Property<int>("SortOrder")
                .HasColumnType("int");

            b.Property<string>("ThumbnailUrl")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("Url")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.HasKey("Id");

            b.HasIndex("ProductId");

            b.ToTable("ProductImages");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.ProductSpecification", b =>
        {
            b.Property<Guid>("Id")
                .HasColumnType("uniqueidentifier");

            b.Property<Guid>("ProductId")
                .HasColumnType("uniqueidentifier");

            b.Property<Guid>("SpecOptionId")
                .HasColumnType("uniqueidentifier");

            b.Property<Guid>("SpecificationId")
                .HasColumnType("uniqueidentifier");

            b.HasKey("Id");

            b.HasIndex("ProductId");

            b.HasIndex("SpecOptionId");

            b.HasIndex("SpecificationId");

            b.ToTable("ProductSpecifications");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.ProductVariant", b =>
        {
            b.Property<Guid>("Id")
                .HasColumnType("uniqueidentifier");

            b.Property<string>("Diameter")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("DriveType")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("Finish")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("Grade")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("HeadType")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("Length")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("Material")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("Mpn")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("PackSize")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<Guid>("ProductId")
                .HasColumnType("uniqueidentifier");

            b.Property<string>("Sku")
                .IsRequired()
                .HasColumnType("nvarchar(450)");

            b.Property<string>("ThreadSize")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("ThreadStandard")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<decimal>("UnitPrice")
                .HasColumnType("decimal(18,2)");

            b.HasKey("Id");

            b.HasIndex("ProductId");

            b.HasIndex("Sku")
                .IsUnique();

            b.ToTable("ProductVariants");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.PurchaseOrder", b =>
        {
            b.Property<Guid>("Id")
                .HasColumnType("uniqueidentifier");

            b.Property<DateTime>("CreatedAt")
                .HasColumnType("datetime2");

            b.Property<DateTime?>("ExpectedArrival")
                .HasColumnType("datetime2");

            b.Property<Guid>("SupplierId")
                .HasColumnType("uniqueidentifier");

            b.Property<string>("Status")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.HasKey("Id");

            b.HasIndex("SupplierId");

            b.ToTable("PurchaseOrders");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.PurchaseOrderLine", b =>
        {
            b.Property<Guid>("Id")
                .HasColumnType("uniqueidentifier");

            b.Property<decimal>("Cost")
                .HasColumnType("decimal(18,2)");

            b.Property<Guid>("ProductVariantId")
                .HasColumnType("uniqueidentifier");

            b.Property<Guid>("PurchaseOrderId")
                .HasColumnType("uniqueidentifier");

            b.Property<int>("Quantity")
                .HasColumnType("int");

            b.HasKey("Id");

            b.HasIndex("ProductVariantId");

            b.HasIndex("PurchaseOrderId");

            b.ToTable("PurchaseOrderLines");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.SpecOption", b =>
        {
            b.Property<Guid>("Id")
                .HasColumnType("uniqueidentifier");

            b.Property<string>("NormalizedValue")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<Guid>("SpecificationId")
                .HasColumnType("uniqueidentifier");

            b.Property<string>("Value")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.HasKey("Id");

            b.HasIndex("SpecificationId");

            b.ToTable("SpecOptions");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.Specification", b =>
        {
            b.Property<Guid>("Id")
                .HasColumnType("uniqueidentifier");

            b.Property<string>("Description")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("Name")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.HasKey("Id");

            b.ToTable("Specifications");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.Supplier", b =>
        {
            b.Property<Guid>("Id")
                .HasColumnType("uniqueidentifier");

            b.Property<string>("ContactEmail")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("ContactPhone")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("Name")
                .IsRequired()
                .HasColumnType("nvarchar(max)");

            b.HasKey("Id");

            b.ToTable("Suppliers");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.Category", b =>
        {
            b.HasOne("Fasteners.Domain.Entities.Category", "Parent")
                .WithMany("Children")
                .HasForeignKey("ParentId");

            b.Navigation("Parent");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.Inventory", b =>
        {
            b.HasOne("Fasteners.Domain.Entities.ProductVariant", "ProductVariant")
                .WithOne("Inventory")
                .HasForeignKey("Fasteners.Domain.Entities.Inventory", "ProductVariantId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.Navigation("ProductVariant");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.PriceTier", b =>
        {
            b.HasOne("Fasteners.Domain.Entities.ProductVariant", "ProductVariant")
                .WithMany("PriceTiers")
                .HasForeignKey("ProductVariantId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.Navigation("ProductVariant");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.Product", b =>
        {
            b.HasOne("Fasteners.Domain.Entities.Brand", "Brand")
                .WithMany()
                .HasForeignKey("BrandId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.HasOne("Fasteners.Domain.Entities.Category", "Category")
                .WithMany("Products")
                .HasForeignKey("CategoryId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.Navigation("Brand");

            b.Navigation("Category");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.ProductImage", b =>
        {
            b.HasOne("Fasteners.Domain.Entities.Product", "Product")
                .WithMany("Images")
                .HasForeignKey("ProductId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.Navigation("Product");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.ProductSpecification", b =>
        {
            b.HasOne("Fasteners.Domain.Entities.Product", "Product")
                .WithMany("Specifications")
                .HasForeignKey("ProductId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.HasOne("Fasteners.Domain.Entities.SpecOption", "SpecOption")
                .WithMany()
                .HasForeignKey("SpecOptionId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.HasOne("Fasteners.Domain.Entities.Specification", "Specification")
                .WithMany("Options")
                .HasForeignKey("SpecificationId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.Navigation("Product");

            b.Navigation("SpecOption");

            b.Navigation("Specification");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.ProductVariant", b =>
        {
            b.HasOne("Fasteners.Domain.Entities.Product", "Product")
                .WithMany("Variants")
                .HasForeignKey("ProductId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.Navigation("Product");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.PurchaseOrder", b =>
        {
            b.HasOne("Fasteners.Domain.Entities.Supplier", "Supplier")
                .WithMany()
                .HasForeignKey("SupplierId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.Navigation("Supplier");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.PurchaseOrderLine", b =>
        {
            b.HasOne("Fasteners.Domain.Entities.ProductVariant", "ProductVariant")
                .WithMany()
                .HasForeignKey("ProductVariantId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.HasOne("Fasteners.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                .WithMany("Lines")
                .HasForeignKey("PurchaseOrderId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.Navigation("ProductVariant");

            b.Navigation("PurchaseOrder");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.SpecOption", b =>
        {
            b.HasOne("Fasteners.Domain.Entities.Specification", "Specification")
                .WithMany("Options")
                .HasForeignKey("SpecificationId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.Navigation("Specification");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.Category", b =>
        {
            b.Navigation("Children");

            b.Navigation("Products");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.Product", b =>
        {
            b.Navigation("Images");

            b.Navigation("Specifications");

            b.Navigation("Variants");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.ProductVariant", b =>
        {
            b.Navigation("Inventory");

            b.Navigation("PriceTiers");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.PurchaseOrder", b =>
        {
            b.Navigation("Lines");
        });

        modelBuilder.Entity("Fasteners.Domain.Entities.Specification", b =>
        {
            b.Navigation("Options");
        });
#pragma warning restore 612, 618
    }
}
